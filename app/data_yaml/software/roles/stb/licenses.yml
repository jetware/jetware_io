---
- path: stb-1.0-9d9f75e/README.md
  type: GPL,LGPL,MIT,MIT-style,Public-domain
  text: "<!---   THIS FILE IS AUTOMATICALLY GENERATED, DO NOT CHANGE IT BY HAND   --->\n\nstb\n===\n\nsingle-file
    public domain (or MIT licensed) libraries for C/C++ <a name=\"stb_libs\"></a>\n\nMost
    libraries by stb, except: stb_dxt by Fabian \"ryg\" Giesen, stb_image_resize\nby
    Jorge L. \"VinoBS\" Rodriguez, and stb_sprintf by Jeff Roberts.\n\n\nlibrary    |
    lastest version | category | LoC | description\n--------------------- | ---- |
    -------- | --- | --------------------------------\n**[stb_vorbis.c](stb_vorbis.c)**
    | 1.11 | audio | 5449 | decode ogg vorbis files from file/memory to float/16-bit
    signed output\n**[stb_image.h](stb_image.h)** | 2.16 | graphics | 7187 | image
    loading/decoding from file/memory: JPG, PNG, TGA, BMP, PSD, GIF, HDR, PIC\n**[stb_truetype.h](stb_truetype.h)**
    | 1.17 | graphics | 4566 | parse, decode, and rasterize characters from truetype
    fonts\n**[stb_image_write.h](stb_image_write.h)** | 1.07 | graphics | 1458 | image
    writing to disk: PNG, TGA, BMP\n**[stb_image_resize.h](stb_image_resize.h)** |
    0.95 | graphics | 2627 | resize images larger/smaller with good quality\n**[stb_rect_pack.h](stb_rect_pack.h)**
    | 0.11 | graphics | 624 | simple 2D rectangle packer with decent quality\n**[stb_sprintf.h](stb_sprintf.h)**
    | 1.03 | utility | 1812 | fast sprintf, snprintf for C/C++\n**[stretchy_buffer.h](stretchy_buffer.h)**
    | 1.02 | utility | 257 | typesafe dynamic array for C (i.e. approximation to vector<>),
    doesn't compile as C++\n**[stb_textedit.h](stb_textedit.h)** | 1.11 | user&nbsp;interface
    | 1393 | guts of a text editor for games etc implementing them from scratch\n**[stb_voxel_render.h](stb_voxel_render.h)**
    | 0.85 | 3D&nbsp;graphics | 3803 | Minecraft-esque voxel rendering \"engine\"
    with many more features\n**[stb_dxt.h](stb_dxt.h)** | 1.07 | 3D&nbsp;graphics
    | 719 | Fabian \"ryg\" Giesen's real-time DXT compressor\n**[stb_perlin.h](stb_perlin.h)**
    | 0.3 | 3D&nbsp;graphics | 316 | revised Perlin noise (3D input, 1D output)\n**[stb_easy_font.h](stb_easy_font.h)**
    | 1.0 | 3D&nbsp;graphics | 303 | quick-and-dirty easy-to-deploy bitmap font for
    printing frame rate, etc\n**[stb_tilemap_editor.h](stb_tilemap_editor.h)** | 0.38
    | game&nbsp;dev | 4172 | embeddable tilemap editor\n**[stb_herringbone_wa...](stb_herringbone_wang_tile.h)**
    | 0.6 | game&nbsp;dev | 1220 | herringbone Wang tile map generator\n**[stb_c_lexer.h](stb_c_lexer.h)**
    | 0.09 | parsing | 962 | simplify writing parsers for C-like languages\n**[stb_divide.h](stb_divide.h)**
    | 0.91 | math | 419 | more useful 32-bit modulus e.g. \"euclidean divide\"\n**[stb_connected_comp...](stb_connected_components.h)**
    | 0.95 | misc | 1045 | incrementally compute reachability on grids\n**[stb.h](stb.h)**
    | 2.30 | misc | 14328 | helper functions for C, mostly redundant in C++; basically
    author's personal stuff\n**[stb_leakcheck.h](stb_leakcheck.h)** | 0.4 | misc |
    186 | quick-and-dirty malloc/free leak-checking\n\nTotal libraries: 20  \nTotal
    lines of C code: 52846\n\n\nFAQ\n---\n\n#### What's the license?\n\nThese libraries
    are in the public domain. You can do anything you\nwant with them. You have no
    legal obligation\nto do anything else, although I appreciate attribution.\n\nThey
    are also licensed under the MIT open source license, if you have lawyers\nwho
    are unhappy with public domain. Every source file includes an explicit\ndual-license
    for you to choose from.\n\n#### <a name=\"other_libs\"></a> Are there other single-file
    public-domain/open source libraries with minimal dependencies out there?\n\n[Yes.](https://github.com/nothings/single_file_libs)\n\n####
    If I wrap an stb library in a new library, does the new library have to be public
    domain/MIT?\n\nNo, because it's public domain you can freely relicense it to whatever
    license your new\nlibrary wants to be.\n\n#### What's the deal with SSE support
    in GCC-based compilers?\n\nstb_image will either use SSE2 (if you compile with
    -msse2) or\nwill not use any SIMD at all, rather than trying to detect the\nprocessor
    at runtime and handle it correctly. As I understand it,\nthe approved path in
    GCC for runtime-detection require\nyou to use multiple source files, one for each
    CPU configuration.\nBecause stb_image is a header-file library that compiles in
    only\none source file, there's no approved way to build both an\nSSE-enabled and
    a non-SSE-enabled variation.\n\nWhile we've tried to work around it, we've had
    multiple issues over\nthe years due to specific versions of gcc breaking what
    we're doing,\nso we've given up on it. See https://github.com/nothings/stb/issues/280\nand
    https://github.com/nothings/stb/issues/410 for examples.\n\n#### Some of these
    libraries seem redundant to existing open source libraries. Are they better somehow?\n\nGenerally
    they're only better in that they're easier to integrate,\neasier to use, and easier
    to release (single file; good API; no\nattribution requirement). They may be less
    featureful, slower,\nand/or use more memory. If you're already using an equivalent\nlibrary,
    there's probably no good reason to switch.\n\n#### Can I link directly to the
    table of stb libraries?\n\nYou can use [this URL](https://github.com/nothings/stb#stb_libs)
    to link directly to that list.\n\n#### Why do you list \"lines of code\"? It's
    a terrible metric.\n\nJust to give you some idea of the internal complexity of
    the library,\nto help you manage your expectations, or to let you know what you're\ngetting
    into. While not all the libraries are written in the same\nstyle, they're certainly
    similar styles, and so comparisons between\nthe libraries are probably still meaningful.\n\nNote
    though that the lines do include both the implementation, the\npart that corresponds
    to a header file, and the documentation.\n\n#### Why single-file headers?\n\nWindows
    doesn't have standard directories where libraries\nlive. That makes deploying
    libraries in Windows a lot more\npainful than open source developers on Unix-derivates
    generally\nrealize. (It also makes library dependencies a lot worse in Windows.)\n\nThere's
    also a common problem in Windows where a library was built\nagainst a different
    version of the runtime library, which causes\nlink conflicts and confusion. Shipping
    the libs as headers means\nyou normally just compile them straight into your project
    without\nmaking libraries, thus sidestepping that problem.\n\nMaking them a single
    file makes it very easy to just\ndrop them into a project that needs them. (Of
    course you can\nstill put them in a proper shared library tree if you want.)\n\nWhy
    not two files, one a header and one an implementation?\nThe difference between
    10 files and 9 files is not a big deal,\nbut the difference between 2 files and
    1 file is a big deal.\nYou don't need to zip or tar the files up, you don't have
    to\nremember to attach *two* files, etc.\n\n#### Why \"stb\"? Is this something
    to do with Set-Top Boxes?\n\nNo, they are just the initials for my name, Sean
    T. Barrett.\nThis was not chosen out of egomania, but as a moderately sane\nway
    of namespacing the filenames and source function names.\n\n#### Will you add more
    image types to stb_image.h?\n\nIf people submit them, I generally add them, but
    the goal of stb_image\nis less for applications like image viewer apps (which
    need to support\nevery type of image under the sun) and more for things like games
    which\ncan choose what images to use, so I may decline to add them if they're\ntoo
    rare or if the size of implementation vs. apparent benefit is too low.\n\n####
    Do you have any advice on how to create my own single-file library?\n\nYes. https://github.com/nothings/stb/blob/master/docs/stb_howto.txt\n\n####
    Why public domain?\n\nI prefer it over GPL, LGPL, BSD, zlib, etc. for many reasons.\nSome
    of them are listed here:\nhttps://github.com/nothings/stb/blob/master/docs/why_public_domain.md\n\n####
    Why C?\n\nPrimarily, because I use C, not C++. But it does also make it easier\nfor
    other people to use them from other languages.\n\n#### Why not C99? stdint.h,
    declare-anywhere, etc.\n\nI still use MSVC 6 (1998) as my IDE because it has better
    human factors\nfor me than later versions of MSVC.\n\n\n\n"
