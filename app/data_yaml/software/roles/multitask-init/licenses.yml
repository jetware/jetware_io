---
- path: jet9-multitask-flow-1.5.1/README.md
  type: BSD-2-Clause
  text: |2

    Read the source code (jet9-multitask-flow) for comments and examples/*.

    Утилита для выполнения init-скриптов в пользовательском контейнере.

    ### Выполнение

    Используются переменные окружения FLOW_DIR и LOCK_DIR, указывающие на каталог с выполняемыми скриптами и на каталог для временных файлов во время исполнения.

    В аргументах указывается команда (action), например, `start` или `stop`. Эта команда будет передана для каждого выполняемого скрипта. После команды может быть указан один или несколько скриптов, для которых должна быть передана эта команда. Если скрипты в аргументах не указаны, то берутся все исполняемые файлы из каталога FLOW_DIR.

    Названия скриптов желательно иметь только буквы, цифры и подчеркивание. Дефисы и точки во внутреннем представлении заменяются на подчеркивания, поэтому возможны конфликты, если будут задачи с именами, отличающимися только дефисом (точкой) и подчеркиванием.

        Usage: jet9-multitask-flow [-a] [-i include_source] [-n] [-v] [-d] action [tasks ...]

        Arguments:
                -a       - add all AUTO-dependent tasks to run list
                -i       - include another shell script source
                -n       - dry run
                -v       - verbose
                -d       - output dependencies for action, can be used for 'tsort'
                                   to check for problems
                action   - start, stop or another action
                tasks    - task scripts from FLOW_DIR;
                                   all scripts from FLOW_DIR used if tasks are omitted

        Environment:
                FLOW_DIR=/own/etc/init
                LOCK_DIR=/tmp/init


    #### Зависимости

    Скрипты в FLOW_DIR или в аргументах flow выполняются параллельно. Скрипты могут выполняться с учетом зависимостей. Если для выполнения одного скрипта требуется, чтобы перед ним уже был выполнен другой скрипт, это указывается через зависимость. Параллельное выполнение учитывает зависимости и задерживает выполнение зависимых скриптов до тех пор, пока не будут выполнены все требуемые зависимости. Порядок с зависимостями соблюдается как для выполнения всех скриптов из FLOW_DIR, так и при перечислении скриптов в аргументах программы.

    Скрипты могут сообщать о своих зависимостях, отвечая на команду `wait` или `wait _action_`, где в качестве _action_ указывается команда, для которой существует эта зависимость. Например, при старте apache может быть зависимость на mysql, а при остановке apache может быть зависимость на nginx.

    Название скрипта является именем зависимости. Если есть скрипт с названием mysql, на него можно устанавливать зависимость.


    ##### Виртуальные зависимости

    Могут также быть "виртуальные" зависимости, которые не имеют скриптов. Например, для старта `apache` может быть указана виртуальная зависимость database. Эта зависимость не является скриптом, но другие скрипты могут отмечать себя в качестве этой зависимости. Таких скриптов может быть несколько. Например, скрипты `mysql` и `postrgresql` могут являться не только зависимостями mysql и postgresql, но и реализовывать виртуальную зависимость database. Тогда apache будет ожидать выполнения обоих скриптов mysql и postgresql, для выполнения ими зависимости database. Скрипты могут сообщать от виртуальных зависимостях, которые они поставляют, отвечая на команду `mark` или `mark _action_`.

    ##### Обратные зависимости

    Задача может объявить не только зависимость себя от других задач, но и наоборот, зависимость других задач от себя, то есть то, что данная задача должна быть выполнена ранее других задач. Эта зависимость описывается отношением `lead`. Например, `syslog` может указать для себя для старта в отношении `lead` задачу `application`, что приведет к тому, что syslog должен быть запущен перед раньше, чем `application`.

    ##### Защита одновременного выполнения

    Задачи могут объявить требования эксклюзивного использования одного или нескольких ресурсов, указав их как виртуальные зависимости с отношение `lock`. Задачи, указавшие одну и ту же lock-зависимость будут выполнены по очереди. Например, если разные задачи используют модем, то они могут указать зависимость `modem` в отношении `lock`.

    Принцип действия `lock` аналогичен атомарному ожиданию и захвату мьютекса. Если `lock` объявляется на несколько зависимостей, то планировщик обеспечивает защиту от взаимных дедлоков разными задачами.

    ##### Автоматическое добавление зависимых задач

    При выполнении перечисленных в аргументах задач можно с помощью ключа `-a` автоматически выполнять другие задачи (и реальные скрипты, и зависимости MARK), от которых зависят задачи в аргументах. Например, если указать `start apache` с ключем `-a`, то будет также выполнена зависимость `database`, которая в свою очередь потребует выполнение `mysql` и `postgresql`. С помощью ключа `-a` можно также указывать команду для виртуальных MARK-задач, например, `-a start database`.

    Для автоматического добавления задач используется отношение AUTO. То есть для того, чтобы привязать автоматический запуск database к `apache`, нужно при запросе отношения `auto` для действия `start` сообщить `database`.

    #### Прерывание процесса

    Flow-процесс можно остановить SIGINT и SIGTERM, при этом те скрипты, которые ожидали выполнения своих зависимостей, будут прерваны.

    #### Защита от повторного выполнения

    LOCK_DIR создается в момент выполнения скриптов и удаляется после завершения. Если при запуске flow каталог уже существует, это означает, чтобы ранее был запущен и еще не завершен другой flow. Flow, обнаруживший существование LOCK_DIR, завершается сразу же с ошибкой.

    #### Холостой прогон

    Ключ -n выполняет прогон flow-процесса с соблюдением зависимостей для указанной команды, но не передавая команду в сами flow-скрипты.

    #### Циклы и несуществующие зависимости

    Программа не проверяет полученные зависимости на наличие циклов или несуществующих зависимостей. Несуществующие зависимости на выполнение При несуществующей зависимости выполнение будет продолжено. При наличии цикла программа заблокируется (dead lock). С помощью ключа -d можно получить граф зависимостей в виде списка зависимых пар, и передать его на вход программы топологической сортировки `tsort`, которая может показывать петли и несуществующие зависимости.

    #### Ошибки в выполнении скриптов

    Код выполнения скриптов не проверяется, при ошибке работа будет продолжена.


    #### Включение другин shell-скриптов

    Через опцию -i можно указать загрузку и выполнение других shell-скриптов.  Это можно использовать для корректировки используемых флагов или для переопределения функций.


    ##### Переопределение функций

    Через включаемый скрипт можно переопределить фнукцию task_dependencies(), которая извлекает для скрипта его wait и mark зависимости. Фукнция принимает 4 аргумента: отношение (wait или mark), название задачи, команда, полный путь к скрипту. После выполнения функции, она должна сохранить имена зависимостей в переменную task_dependencies_result.

    В программе функция определения зависимостей выполняет скрипт, передавая ему имя отношения и команду, и читает результат из его стандартного вывода. Переопределив эту функцию можно получать зависимости с помощью grep или awk из заголовков скриптов, либо любым другим образом.


    ##### Запрет выполнения команд

    Программу jet9-multitask-flow можно использовать как библиотеку, используя ее функции для выполнения зависимостей, описанных в шелл-скрипте или каким-то другим образом. Для того, чтобы при загрузке скрипт не выполнялся как CLI-команда, нужно задать непустую переменную окружения JET9_MULTITASK_FLOW_CLI_DISABLE. В этом случае будут только загружены функции, но не будет выполняться парсинг аргументов и выполнение задач.


    ## LICENSE:

    Copyright © 2014-2015 Cyril Vechera http://jet9.net
    All rights reserved.

    BSD-2

    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
